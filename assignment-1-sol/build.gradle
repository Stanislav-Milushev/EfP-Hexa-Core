plugins {
    // The Java plugin adds Java compilation along with testing and bundling capabilities to a project. It serves as the
    // basis for many of the other JVM language Gradle plugins.
    // The Java Plugin is required in gradle projects, in order to compile Java code.
    // https://docs.gradle.org/current/userguide/java_plugin.html
    id 'java'
}

// The group ID uniquely identifies the project across all projects. A group ID should follow Java's package name rules.
// https://maven.apache.org/guides/mini/guide-naming-conventions.html
// Since our java package is called "org.mbe.sat.assignment" we use "org.mbe.sat.assignment" as our group id.
group 'org.mbe.sat.assignment'

// You may choose a version as you like when submitting you task.
version '1.0-SNAPSHOT'

// We agreed on using Java 8 for the assignments. The following command tell Gradle that the source code is compatible
// with Java 8. Specifies the version of the Java programming language be used to compile .java files. This way we could
// use a JDK 11 or higher to build and run the application, while the compiler makes sure that we only use Java 8
// compatible features in our source code.
sourceCompatibility = JavaVersion.VERSION_1_8

// This defines an additional Java source folder which contains the classes that where generated from the meta model
sourceSets {
    srcGen {
        main {
            java {
                srcDir 'src-gen'
            }
        }
    }
}

// Defines the servers (repositories) from where the dependencies are downloaded
repositories {
    mavenCentral()
}

// This defines all projects, libraries etc. that this project depends on. When the project is built, this dependencies
// are downloaded by Gradle automatically and added to the classpath.
// https://docs.gradle.org/current/userguide/dependency_management_for_java_projects.html
dependencies {

    // Logging Framework "logback" in combination with SLF4J. Logback and SLF4J are both included in this dependency
    // This logger is used in the "testFixtures" and in some of the solution sources for the next assignments. The
    // logger is configured using the "logback.xml" in the corresponding source set resources folder.
    // https://github.com/qos-ch/logback
    // http://logback.qos.ch/
    implementation 'ch.qos.logback:logback-classic:1.2.3'

    // Lets us use the Eclipse Modeling Framework (EMF) in our Gradle project without needing to use Eclipse itself
    // https://www.eclipse.org/modeling/emf/
    implementation group: 'org.eclipse.emf', name: 'org.eclipse.emf.ecore', version: '2.23.0'

    // LogicNG library used to convert a formula into CNF.
    // https://github.com/logic-ng/LogicNG
    implementation group: 'org.logicng', name: 'logicng', version: '2.0.0'

    // Use JUnit 5 Test Framework for unit test.
    // https://junit.org/junit5/
    // https://github.com/junit-team/junit5
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.0'

    // Provides matchers that make JUnit assertions easier to read
    // https://github.com/hamcrest/JavaHamcrest
    // http://hamcrest.org/JavaHamcrest/
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
}
